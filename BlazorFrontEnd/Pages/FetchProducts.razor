@using Shared.Models
@using System.Text.Json
@page "/fetch"

<h3>Product List</h3>

<ul>
    @if (products != null)
    {
        foreach (var product in products)
        {
            <li>@product.Name - $@product.Price (@product.Stock in stock) </li>
        }
    }
    else if (errorMessage != null)
    {
        <li>@errorMessage</li>
    }
    else
    {
        <li>Loading...</li>
    }
</ul>

@code {
    private List<Product>? products;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var httpClient = new HttpClient
            {
                Timeout = TimeSpan.FromSeconds(10) // Set a timeout for the request
            };

            var response = await httpClient.GetAsync("http://localhost:5035/api/products");

            if (!response.IsSuccessStatusCode)
            {
                errorMessage = $"Error: Unable to fetch products (Status Code: {response.StatusCode})";
                return;
            }

            var jsonResponse = await response.Content.ReadAsStringAsync();

            products = JsonSerializer.Deserialize<List<Product>>(jsonResponse, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true // Handle case-insensitive property names
            });

            if (products == null)
            {
                errorMessage = "Error: No products found in the response.";
            }
        }
        catch (TaskCanceledException)
        {
            errorMessage = "Error: The request timed out. Please try again later.";
        }
        catch (JsonException)
        {
            errorMessage = "Error: Failed to parse the product data.";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: An unexpected error occurred - {ex.Message}";
        }
    }
}