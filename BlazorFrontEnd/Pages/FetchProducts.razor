@using Shared.Models
@using System.Text.Json
@page "/fetch"

<h3>Product List</h3>

@if (products == null && errorMessage == null) // Display a loading message while data is being fetched
{
    <div class="alert alert-info">Loading...</div>
}
else if (errorMessage != null) // Check if there is an error message
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (products != null) // Check if the products list is loaded
{
    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Name</th>
                <th>Price</th>
                <th>Stock</th>
                <th>Category</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products) // Iterate through the products list
            {
                <tr>
                    <td>@product.Name</td>
                    <td>$@product.Price</td>
                    <td>@product.Stock</td>
                    <td>@(product.Category?.Name ?? "Unknown")</td>
                </tr>
            }
        </tbody>
    </table>
}

@* Inject the ProductService to fetch products *@
@inject ProductService ProductService

@code {
    private List<Product>? products; // List to store the fetched products
    private string? errorMessage; // Variable to store error messages

    // Lifecycle method that runs when the component is initialized
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch products using the ProductService
            products = await ProductService.GetProductsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

}